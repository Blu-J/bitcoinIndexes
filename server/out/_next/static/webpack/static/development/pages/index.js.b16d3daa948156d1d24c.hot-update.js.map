{"version":3,"file":"static/webpack/static/development/pages/index.js.b16d3daa948156d1d24c.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import * as React from \"react\";\nimport gql from \"graphql-tag\";\nimport dynamic from \"next/dynamic\";\nimport { PlotParams } from \"react-plotly.js\";\nimport { Column, Table } from \"react-virtualized\";\nimport matches from \"ts-matches\";\nimport withHooks, { useReducer, useState, useEffect } from \"react-with-hooks\";\nimport Head from \"next/head\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Select from \"@material-ui/core/Select\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport produce from \"immer\";\nimport {\n  FormControl,\n  InputLabel,\n  Input,\n  Checkbox,\n  ListItemText\n} from \"@material-ui/core\";\nimport initApollo from \"../lib/initApollo\";\nimport { ApolloClient } from \"apollo-boost\";\n\nexport const matchOrder = matches.shape({\n  price: matches.number,\n  amount: matches.number,\n  type: matches.some(matches.literal(\"bid\"), matches.literal(\"ask\")),\n  serverName: matches.string\n});\n\ntype Order = typeof matchOrder._TYPE;\n\nconst Plot = dynamic<PlotParams>(import(\"../Components/plotly\") as any, {\n  ssr: false\n});\n\nconst QUERY = gql`\n  query Orders($market: String!, $exchanges: [String]!) {\n    orders(exchanges: $exchanges, market: $market) {\n      price\n      amount\n      serverName\n      type\n    }\n  }\n`;\n\nenum Market {\n  ETH = \"ETH\",\n  DOGE = \"DOGE\",\n  LTC = \"LTC\"\n}\n\nconst allMarkets: [string, Market][] = [\n  [\"Ehtereum\", Market.ETH],\n  [\"Doge Coin\", Market.DOGE],\n  [\"Lite Coin\", Market.LTC]\n];\n\nenum Exchange {\n  poloniex = \"poloniex\",\n  bittrex = \"bittrex\",\n  gdax = \"gdax\",\n  gemini = \"gemini\"\n}\n\nconst allExchanges: [string, Exchange][] = [\n  [\"Poloniex\", Exchange.poloniex],\n  [\"Bittrex\", Exchange.bittrex],\n  [\"GDAX\", Exchange.gdax],\n  [\"Gemini\", Exchange.gemini]\n];\n\ntype State = {\n  market: Market;\n  exchanges: Exchange[];\n};\nconst defaultState: State = {\n  market: Market.DOGE,\n  exchanges: [Exchange.bittrex, Exchange.poloniex]\n};\nconst reducer = (state: State, update: (state: State) => void | State) => {\n  return produce(state, update);\n};\ntype QueryState =\n  | {\n      loading: true;\n      error?: unknown;\n      data?: unknown;\n    }\n  | {\n      loading: false;\n      error?: any;\n      data?: unknown;\n    };\nconst useQuery = <Args extends {}>(\n  query: string,\n  variables: Args\n): QueryState => {\n  const [state, updateState] = useState({ loading: true } as QueryState);\n  useEffect(\n    () => {\n      (initApollo({}) as ApolloClient<any>)\n        .query({\n          query,\n          variables\n        })\n        .then(\n          goodValue => {\n            updateState({\n              loading: false,\n              data: goodValue.data\n            });\n          },\n          badValue => {\n            updateState({\n              loading: false,\n              error: String(badValue)\n            });\n          }\n        );\n      return () => void 0;\n    },\n    [variables]\n  );\n  return state;\n};\n\ntype GroupPair = [string, Order[]];\nexport const OrderChart = (props: { orders: Order[]; name: string }) => (\n  <Grid item xs={6}>\n    <Plot\n      data={props.orders\n        .reduce((acc: GroupPair[], order) => {\n          const index = acc.map(([a]) => a).indexOf(order.serverName);\n          if (index < 0) {\n            return [...acc, [order.serverName, [order]]] as any;\n          }\n          acc[index][1].push(order);\n          return acc;\n        }, [])\n        .map(([key, orders]: GroupPair) => ({\n          x: orders.map(x => x.price),\n          y: orders.map(x => x.amount),\n          name: key,\n          type: \"bar\"\n        }))}\n      layout={{\n        title: props.name,\n        barmode: \"relative\",\n        yaxis: {\n          type: \"log\",\n          title: \"Amount\"\n        },\n        xaxis: {\n          title: \"Price\"\n        }\n      }}\n    />\n  </Grid>\n);\n\nexport default withHooks(function Index() {\n  const [state, update] = useReducer(reducer, defaultState);\n  const query = useQuery(QUERY, state);\n  const data = [];\n  console.log(\"Data is \", data);\n  const orders: Order[] = matches\n    .shape({ orders: matches.arrayOf(matchOrder) })\n    .unsafeCast(data).orders;\n\n  const asks = orders.filter(x => x.type === \"ask\");\n  const bids = orders.filter(x => x.type === \"bid\");\n  return (\n    <>\n      <Head>\n        <title>Bitcoin Books</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500\"\n        />\n        <link\n          rel=\"stylesheet\"\n          href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n        />\n      </Head>\n      <Grid container spacing={24}>\n        <Grid item xs={6}>\n          <Select\n            value={state.market}\n            onChange={event =>\n              update(x => {\n                x.market = event.target.value;\n              })\n            }\n          >\n            {allMarkets.map(([name, market]) => (\n              <MenuItem key={market} value={market}>\n                {name}\n              </MenuItem>\n            ))}\n          </Select>\n        </Grid>\n        <Grid item xs={6}>\n          <FormControl>\n            <InputLabel htmlFor=\"select-multiple-checkbox\">\n              Exchanges\n            </InputLabel>\n            <Select\n              multiple\n              value={state.exchanges}\n              onChange={element =>\n                update(x => {\n                  x.exchanges = element.target.value;\n                })\n              }\n              input={<Input id=\"select-multiple-checkbox\" />}\n              renderValue={(selected: string[]) => selected.join(\", \")}\n            >\n              {allExchanges.map(([name, value]) => (\n                <MenuItem key={name} value={value}>\n                  <Checkbox checked={state.exchanges.indexOf(value) > -1} />\n                  <ListItemText primary={name} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        {query.loading ? (\n          <p>Loading...</p>\n        ) : query.error ? (\n          <p>Error :({JSON.stringify(query.error, null, 2)}</p>\n        ) : (\n          <>\n            <Grid item xs={6}>\n              <OrderChart name=\"Asks\" orders={asks} />\n              <OrderChart name=\"Asks2\" orders={asks} />\n              <Plot\n                data={bids\n                  .reduce((acc: GroupPair[], order) => {\n                    const index = acc.map(([a]) => a).indexOf(order.serverName);\n                    if (index === -1) {\n                      return [...acc, [order.serverName, [order]]] as any;\n                    }\n                    acc[index][1].push(order);\n                    return acc;\n                  }, [])\n                  .map(([key, orders]: GroupPair) => ({\n                    x: orders.map(x => x.price),\n                    y: orders.map(x => x.amount),\n                    name: key,\n                    type: \"bar\"\n                  }))}\n                layout={{\n                  title: \"Bids\",\n                  barmode: \"relative\",\n                  yaxis: {\n                    type: \"log\",\n                    title: \"Amount\"\n                  },\n                  xaxis: {\n                    title: \"Price\"\n                  }\n                }}\n              />\n            </Grid>\n            <Grid item xs={6}>\n              <h1>Asks Table</h1>\n              <Table\n                width={600}\n                height={500}\n                headerHeight={30}\n                rowHeight={50}\n                rowCount={bids.length}\n                rowGetter={({ index }: { index: number }) => bids[index]}\n              >\n                <Column label=\"Rate\" dataKey=\"price\" width={300} />\n                <Column label=\"Amount\" dataKey=\"amount\" width={300} />\n                <Column\n                  label=\"Exchange Name\"\n                  dataKey=\"serverName\"\n                  width={300}\n                />\n              </Table>\n            </Grid>\n            <Grid item xs={6}>\n              <h1>Bids Table</h1>\n              <Table\n                width={600}\n                height={500}\n                headerHeight={30}\n                rowHeight={50}\n                rowCount={asks.length}\n                rowGetter={({ index }: { index: number }) => asks[index]}\n              >\n                <Column label=\"Rate\" dataKey=\"price\" width={300} />\n                <Column label=\"Amount\" dataKey=\"amount\" width={300} />\n                <Column\n                  label=\"Exchange Name\"\n                  dataKey=\"serverName\"\n                  width={300}\n                />\n              </Table>\n            </Grid>\n          </>\n        )}\n      </Grid>\n    </>\n  );\n});\n"],"mappings":"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","sourceRoot":""}